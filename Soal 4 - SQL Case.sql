-- Create the table
CREATE TABLE ecommerce_session (
	fullVisitorId VARCHAR(255),
	channelGrouping VARCHAR(255),
	time BIGINT,
	country VARCHAR(255),
	city VARCHAR(255),
	totalTransactionRevenue DOUBLE PRECISION,
	transactions DOUBLE PRECISION,
	timeOnSite DOUBLE PRECISION,
	pageviews DOUBLE PRECISION,
	sessionQualityDim DOUBLE PRECISION,
	date VARCHAR(255),
	visitId VARCHAR(255),
	type VARCHAR(255),
	productRefundAmount DOUBLE PRECISION,
	productQuantity DOUBLE PRECISION,
	productPrice BIGINT,
	productRevenue DOUBLE PRECISION,
	productSKU VARCHAR(255),
	v2ProductName VARCHAR(255),
	v2ProductCategory VARCHAR(255),
	productVariant VARCHAR(255),
	currencyCode VARCHAR(255),
	itemQuantity DOUBLE PRECISION,
	itemRevenue DOUBLE PRECISION,
	transactionRevenue DOUBLE PRECISION,
	transactionId VARCHAR(255),
	pageTitle VARCHAR(255),
	searchKeyword VARCHAR(255),
	pagePathLevel1 VARCHAR(255),
	eCommerceAction_type BIGINT,
	eCommerceAction_step BIGINT,
	eCommerceAction_option VARCHAR(255)
);
-- Upload the data
COPY ecommerce_session
FROM 'C:\Program Files\PostgreSQL\16\data\ecommerce-session-bigquery.csv'
WITH (FORMAT csv, HEADER true);

-- Check the table
select *
from ecommerce_session es;
-- Familiarize with notable fields (`channelGrouping`, `country`, `fullVisitorId`, `timeOnSite`, `pageviews`, `sessionQualityDim`, `v2ProductName`, `productRevenue`, `productQuantity`, and `productRefundAmount`)
select channelgrouping, country, fullvisitorid, timeonsite, pageviews, sessionqualitydim, v2productname, productrevenue, productquantity, productrefundamount 
from ecommerce_session es;

-- Test Case 1: Channel Analysis
-- Determining the total revenue generated from each channel grouping for the top 5 countries producing the highest revenue:
with temp1 as(
	-- Create the outermost temporary table to get the totalrevenue of the top 5 countries by total revenue, and grouping them by channelgrouping
	with temp2 as(
		-- Create the second innermost temporary table to get the top 5 countries by total revenue
		with temp3 as(
			-- Create the innermost temporary table to get the total revenue for each country
			select sum(totaltransactionrevenue) as totalrevenue, country 
			from ecommerce_session es
			group by country
		)
		select totalrevenue, country
		from temp3
		where totalrevenue is not null
		order by totalrevenue desc
		limit 5
	)
	select es.country, channelgrouping, sum(totaltransactionrevenue) as totalrevenue
	from ecommerce_session es, temp2
	where es.country in (temp2.country)
	group by es.country, channelgrouping
	order by es.country asc, channelgrouping asc
)
-- Get the rows with no null values
select *
from temp1
where totalrevenue is not null;

-- Test Case 2: User Behavior Analysis
-- Calculate metrics like average `timeOnSite`, average `pageviews`, and average `sessionQualityDim` for each `fullVisitorId`
-- Then, identify users who spend above-average time on the site but view fewer pages than the average user:
with temp1 as (
	-- Create a temporary table to get the per user average values for the timeonsite, pageviews, and sessionqualitydim columns
	select fullvisitorid, avg(timeonsite) as avg_timeonsite, avg(pageviews) as avg_pageviews, avg(sessionqualitydim) as avg_sessionqualitydim
	from ecommerce_session es
	group by fullvisitorid
)
-- Filter the data to only show the users who spend above-average time on the site but view fewer pages than the average user
select *
from temp1
where temp1.avg_timeonsite > (select avg(timeonsite) from ecommerce_session es)
and temp1.avg_pageviews < (select avg(pageviews) from ecommerce_session es);
-- As we can see from the results above, we can see that there are 573 users that fall within that behaviour category

-- Test Case 3: Product Performance
-- The productrefund amount is all null, and the productquantity is mostly null as well
-- Therefore, for productquantity, we are going to divide the totaltransactionrevenue with the productprice:
update ecommerce_session
set productquantity = floor(totaltransactionrevenue / productprice)
where productprice > 0
and productquantity is null;
-- And for the productrefundamount, we are going to see existing productquantity that is not null, and that the quantity times price is higher than the totaltransactionrevenue:
update ecommerce_session
set productrefundamount = (productquantity * productprice) - totaltransactionrevenue
where totaltransactionrevenue < (productquantity * productprice)
and productprice > 0
and productquantity is not null
and totaltransactionrevenue is not null;
-- Now set the productrefundamount that is null to 0 to help with the analysis later on:
update ecommerce_session
set productrefundamount = 0
where productrefundamount is null
and productquantity is not null
and totaltransactionrevenue is not null;
-- Now, we can compute the total revenue generated by each product (`v2ProductName`), determine the total quantity sold for each product, calculate the total refund amount for each product:
with temp1 as(
	-- Create the second temporary table to get the net total revenue per each product
	with temp2 as(
		-- Create the first temporary table to get the total revenue generated by each product, the total quantity sold for each product, and the total refund amount for each product
		select v2productname, sum(totaltransactionrevenue) as totaltransactionrevenue, sum(productquantity) as total_productquantity, sum(productrefundamount) as total_productrefundamount
		from ecommerce_session es 
		group by v2productname
	)
	select temp2.*, (totaltransactionrevenue - total_productrefundamount) as net_totalrevenue
	from temp2
	where total_productquantity is not null
	and totaltransactionrevenue is not null
	order by net_totalrevenue desc
)
-- Add the flagging column
select temp1.*, (total_productrefundamount > 0.1*totaltransactionrevenue) as flag
from temp1;
-- As we can see, there is one product that has a refund amount greater than 10% of the total revenue.
-- As a matter of fact, it has a refund amount of approximately 146% of the total revenue, making the net revenue a negative (a loss).